# written by: Juan van Genderen
# Date: 30/03/2022
# Purpose: Automated check of which teams and their level of permissions exist for a list of repositories on GitHub
import requests
import os
from dotenv import load_dotenv


class Credentials:
    # Supply user credentials to sign in to the GitHub API with personal access token from the .env file within the script directory
    load_dotenv()
    login = os.getenv('login')
    token = os.getenv("github_token")

    @staticmethod
    def github_repo_team_perms_checker():

        # Headers supplied so GitHub treats request as coming from a web browser in case it decides to reject the requests
        headers = {'user-agent': ('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)'
                                  'AppleWebKit/537.36 (KHTML, like Gecko)'
                                  'Chrome/45.0.2454.101 Safari/537.36')
                   }
        # Enter who owns the repositories
        repo_owner = ""
        # Building the API endpoint to query which will contain the repo from the repo_list we're iterating through
        repo_url = "https://api.github.com/repos/{}/{}/teams"
        # Building the API endpoint to query which AAD groups are mapped to a Slug from the slug_list we're iterating through
        slug_url = "https://api.github.com/orgs/{}/teams/{}/team-sync/group-mappings"
        # List of slugs
        slug_list = []
        # If file .env doesn't exist then one will be created with variable placeholders and the script will end
        if not os.path.exists('.env'):
            with open('.env', 'w') as make_envfile:
                make_envfile.write(f"login=\n"
                                   f"github_token=")
                print(f"No .env file found!\n"
                      f"**A .env file has been automatically created**\n"
                      f"Please enter a valid GitHub username for variable 'login'\n"
                      f"Please enter a valid Personal Access Token for variable 'github_token'")
                exit()
        # If file Repos.txt doesn't exist then a blank one will be created and the script will end
        if not os.path.exists('Repos.txt'):
            with open('Repos.txt', 'w') as make_file:
                make_file.write('')
                print(f"No Repos.txt file found!\n"
                      f"**Repos.txt has been automatically created.** \n"
                      f"Enter each repository name on a new line and save this file!\n")
                exit()
        # Try to fetch the teams listed for each repository within the Repos.txt file
        with open('Repos.txt', 'r') as repo_list, open('.env', 'r'):
            lines = repo_list.read().splitlines()
            size_repos = os.path.getsize('Repos.txt')
            size_env = os.path.getsize('.env')
            # Check the Repos.txt file is empty
            if size_repos < 1:
                print(f"The Repos.txt file is empty, please supply a list of repositories to check!")
            # Check if the Credentials variables are empty
            if size_env < 1:
                print(f"The .env file is empty!")

            # Try to obtain Teams information for each repository within the Repos.txt file
            for repos in lines:
                if not Credentials.login or not Credentials.token:
                    print(f"No login details supplied within the .env file, please enter valid credentials!")
                    break
                try:
                    session = requests.Session()
                    # Building the request which contains the formatted url, headers and login credentials
                    r = session.get(repo_url.format(repo_owner, repos), headers=headers,
                                    auth=(Credentials.login, Credentials.token), timeout=(1, 5))
                    print(f"Checking if {repos} exists on Github...\n")
                    json_response = r.json()
                    r.raise_for_status()
                    if r.status_code // 100 == 2:
                        print(f"**Teams listed in {repos}**\n")
                        for i in json_response:
                            if i['slug'] not in slug_list:
                                slug_list.append(i['slug'])
                            if 'admin' in i['permission']:
                                print("Teams found with Admin permissions:")
                                print(f"Name: {i['name']} \n"
                                      f"Slug: {i['slug']} \n"
                                      f"Description: {i['description']} \n"
                                      f"Permissions: {i['permissions']}\n")

                            if 'push' in i['permission']:
                                print("Teams found with Write permissions:")
                                print(f"Name: {i['name']} \n"
                                      f"Slug: {i['slug']} \n"
                                      f"Description: {i['description']} \n"
                                      f"Permissions: {i['permissions']}\n")

                            if 'pull' in i['permission']:
                                print("Teams found with Read permissions:")
                                print(f"Name: {i['name']} \n"
                                      f"Slug: {i['slug']} \n"
                                      f"Description: {i['description']} \n"
                                      f"Permissions: {i['permissions']}\n")
                        #print(f"------------------------------------------\n")

                        for slugs in slug_list:
                            print(f"Checking which AAD group is linked to Team: {slugs}...\n")
                            # Building a new request which contains the formatted url, headers and login credentials
                            r2 = session.get(slug_url.format(repo_owner, slugs), headers=headers,
                                             auth=(Credentials.login, Credentials.token), timeout=(1, 5))
                            json_response2 = r2.json()
                            r2.raise_for_status()
                            if r2.status_code // 100 == 2:
                                for groups in json_response2['groups']:
                                    print(f"AAD Groups found:\n"
                                          f"Name: {groups['group_name']}\n")
                        print(f"------------------------------------------\n")

                # Catch any timeouts from GitHub
                except requests.exceptions.Timeout as timeout:
                    print(timeout)
                # Catch any HTTP response errors from GitHub (EG: error 404 if the repository doesn't exist or you don't have access)
                except requests.exceptions.HTTPError as httperror:
                    print(f"{httperror}\n")
                    print(f"Check the spelling of the repositories listed in the Repos.txt file!\n")


# Main function building
if __name__ == "__main__":
    Credentials = Credentials()
    Credentials.github_repo_team_perms_checker()
